package stratifx.application.webkine;

import fr.ifp.jdeform.deformation.DeformationStyle;
import fr.ifp.jdeform.deformation.MeshSolver;
import fr.ifp.jdeform.deformation.constraint.DeformLink;
import fr.ifp.kronosflow.mesh.Mesh2D;
import fr.ifp.kronosflow.polyline.Node;
import fr.ifp.kronosflow.warp.Displacement;
import fr.ifp.kronosflow.warp.NodeDisplacement;
import fr.ifpen.kine.client.ConstraintClient;
import fr.ifpen.kine.client.MeshClient;
import fr.ifpen.kine.client.SimulationClient;
import fr.ifpen.kine.constraint.ConstraintSet;
import fr.ifpen.kine.constraint.Displacements;
import fr.ifpen.kine.constraint.Material;
import fr.ifpen.kine.mesh.Mesh;
import fr.ifpen.kine.mesh.Region;
import fr.ifpen.kine.process.ProcessResult;
import fr.ifpen.kine.process.ProcessState;
import fr.ifpen.kine.simulation.SimulationDTO;

import java.util.Collection;

public class WebSolver extends MeshSolver {

    SimulationDTO simulation;

    boolean withDeleteSession = true;

    @Override
    public boolean solve(Collection<DeformLink> nodeLinks) {

        SimulationDTO simulation = SimulationClient.createSimulationNow("/tmp");
        if ( null == simulation ){
            return false;
        }

        Mesh2D mesh2d = getMesh();

        if ( simulation.getId() != null ) {
            MeshMapper meshMapper = new MeshMapper();
            Mesh mesh = meshMapper.fromMesh2D(mesh2d);
            mesh.setName("mesh generated by stratiFX");
            mesh.setSimulationId(simulation.getId());
            if ( !MeshClient.write(mesh) ){
                return false;
            }


            ConstraintMapper constraintMapper = new ConstraintMapper();
            ConstraintSet constraintSet = constraintMapper.fromDeformLinks(nodeLinks);
            constraintSet.setName("stratiFX");
            constraintSet.setSimulationId(simulation.getId());


            DeformationStyle deformationStyle = new DeformationStyle(deformation.getStyle());
            Material defaultMaterial = new Material();
            defaultMaterial.setName("mate001");
            defaultMaterial.setNu(deformationStyle.getPoisson());
            defaultMaterial.setYoung(deformationStyle.getYoung());

            Region materialRegion = mesh.findRegionByName("Material");
            defaultMaterial.setRegionId( materialRegion.getId() );

            constraintSet.addMaterial(defaultMaterial);

            if ( !ConstraintClient.write(constraintSet) ){
                return false;
            }

            if ( !SimulationClient.launchSimulation(simulation) ){
                return false;
            }
        }



        ProcessState state = null;
        try {

            do {

                Thread.sleep(200);

                state = SimulationClient.getState(simulation.getId());
            } while( state.getState() != ProcessState.State.ENDED );
        } catch (InterruptedException e) {
            e.printStackTrace();
            return false;
        }

        if (    ( state != null ) &&
                ( state.getResult() != null ) &&
                ( state.getResult().getDiagnosis() != ProcessResult.Diagnosis.ERROR ) ){

            Displacements displacements = SimulationClient.getDisplacements(simulation.getId());

            synchronized (getController()) {
                for (Displacement disp : warp.getDisplacements()) {
                    NodeDisplacement nodeDisplacement = (NodeDisplacement) disp;

                    Node node = (Node) mesh2d.getNode(nodeDisplacement.getNodeId());
                    double[] pos = node.getPosition();
                    double[] du = displacements.getDu(((NodeDisplacement) disp).getNodeId().getId());

                    if (null != du) {
                        disp.setTarget(new double[]{pos[0] + du[0], pos[1] + du[1]});
                    }
                }
            }

            if ( withDeleteSession ) {
                SimulationClient.deleteSimulation(simulation.getId());
            }

            return true;

        }



        return false;
    }

}
